/*
    Copyright 2012 Dario Casalinuovo. All rights reserved.

    This file is part of CDRipper.

    Faber is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Faber is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CDRipper.  If not, see <http://www.gnu.org/licenses/>.
*/
#include <QTextStream>

#include "project.h"


Project::Project(QFile* file, QString album)
	:
	pFile(file),
	albumName(album)
{
    pFile->open(QIODevice::ReadWrite | QIODevice::Text);
    printf("%s\n", strerror(pFile->error()));
}


Project::~Project()
{
    delete pFile;
}


void
Project::load()
{
    pFile->seek(0);
    QTextStream in(pFile);
    albumName = in.readLine();
    printf("%s\n", albumName.toStdString().c_str());

    if (in.readLine() != "")
        return;

    while (!in.atEnd()) {
        QString line = in.readLine();
        if (line == "")
            break;
        trackList.append(line);
    }
    while (!in.atEnd()) {
        QString line = in.readLine();
        if (line == "")
            break;
        convTrackList.append(line);
    }
}


bool
Project::save()
{
    cleanUp();
    pFile->seek(0);
    QTextStream out(pFile);
    //out << "#This file is generated by cdrip\n";
    out << albumName+"\n";
    out << "\n";

    QStringListIterator tracks(trackList);
     while (tracks.hasNext())
          out << tracks.next().toLocal8Bit().constData() << endl;

    out << "\n";

    QStringListIterator convTracks(convTrackList);
     while (convTracks.hasNext())
          out << convTracks.next().toLocal8Bit().constData() << endl;

     out << "\n";
     return true;
}


void
Project::setAlbumName(QString name)
{
    albumName = name;
}


void
Project::addTrack(QString track)
{
    trackList.append(track);
}


void
Project::addConvertedTrack(QString track)
{
    convTrackList.append(track);
}


void
Project::reset()
{
	trackList.clear();
	convTrackList.clear();
}


void
Project::cleanUp()
{
    pFile->seek(0);
    pFile->resize(pFile->pos());
}
